package main

import (
	"testing"

	"github.com/spf13/afero"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestRun(t *testing.T) {
	t.Parallel()

	t.Run("Successfully generates AGENTS.md", func(t *testing.T) {
		t.Parallel()

		fs := afero.NewMemMapFs()

		// Create docs/AGENTS.md with WebKit-specific content
		docsContent := `## WebKit

WebKit is a Go-based CLI tool.

## Build & Commands

- **Run CLI**: ` + "`pnpm webkit <command>`" + `
- **Build**: ` + "`pnpm build`" + `
`
		err := afero.WriteFile(fs, docsContentPath, []byte(docsContent), 0o644)
		require.NoError(t, err)

		// Create internal/gen/docs/CODE_STYLE.md
		codeStyleContent := `## Go

### General

Use gofmt for formatting.

## HTML

### Indentation

Use tabs for indentation.
`
		err = fs.MkdirAll("internal/gen/docs", 0o755)
		require.NoError(t, err)
		err = afero.WriteFile(fs, "internal/gen/docs/CODE_STYLE.md", []byte(codeStyleContent), 0o644)
		require.NoError(t, err)

		// Run generation
		err = run(fs, "AGENTS.md")
		require.NoError(t, err)

		// Verify AGENTS.md was created
		exists, err := afero.Exists(fs, "AGENTS.md")
		require.NoError(t, err)
		assert.True(t, exists, "AGENTS.md should be generated")

		// Read and verify content
		content, err := afero.ReadFile(fs, "AGENTS.md")
		require.NoError(t, err)

		contentStr := string(content)

		// Should start with WebKit notice as HTML comment
		assert.Contains(t, contentStr, "<!-- Code generated by webkit; DO NOT EDIT. -->")
		assert.True(t, len(contentStr) > 0 && contentStr[0:4] == "<!--", "File should start with HTML comment")

		// Should contain header from template
		assert.Contains(t, contentStr, "# Agent Guidelines")
		assert.Contains(t, contentStr, "Note For Humans")

		// Should contain WebKit-specific content from docs/AGENTS.md
		assert.Contains(t, contentStr, "## WebKit")
		assert.Contains(t, contentStr, "WebKit is a Go-based CLI tool")
		assert.Contains(t, contentStr, "## Build & Commands")

		// Should contain code style guidelines
		assert.Contains(t, contentStr, "## Go")
		assert.Contains(t, contentStr, "Use gofmt for formatting")
		assert.Contains(t, contentStr, "## HTML")
		assert.Contains(t, contentStr, "Use tabs for indentation")
	})

	t.Run("Errors when docs/AGENTS.md does not exist", func(t *testing.T) {
		t.Parallel()

		fs := afero.NewMemMapFs()

		// Create only CODE_STYLE.md
		err := fs.MkdirAll("internal/gen/docs", 0o755)
		require.NoError(t, err)
		err = afero.WriteFile(fs, "internal/gen/docs/CODE_STYLE.md", []byte("content"), 0o644)
		require.NoError(t, err)

		// Should error because docs/AGENTS.md doesn't exist
		err = run(fs, "AGENTS.md")
		assert.Error(t, err)
		assert.Contains(t, err.Error(), "reading docs/AGENTS.md")
	})

	t.Run("Errors when CODE_STYLE.md does not exist", func(t *testing.T) {
		t.Parallel()

		fs := afero.NewMemMapFs()

		// Create only docs/AGENTS.md
		err := afero.WriteFile(fs, docsContentPath, []byte("content"), 0o644)
		require.NoError(t, err)

		// Should panic from MustLoadGenFile (exits with os.Exit in real usage)
		assert.Panics(t, func() {
			_ = run(fs, "AGENTS.md")
		})
	})

	t.Run("Errors when cannot write output file", func(t *testing.T) {
		t.Parallel()

		fs := afero.NewMemMapFs()

		// Create docs/AGENTS.md
		err := afero.WriteFile(fs, docsContentPath, []byte("content"), 0o644)
		require.NoError(t, err)

		// Create CODE_STYLE.md
		err = fs.MkdirAll("internal/gen/docs", 0o755)
		require.NoError(t, err)
		err = afero.WriteFile(fs, "internal/gen/docs/CODE_STYLE.md", []byte("content"), 0o644)
		require.NoError(t, err)

		// Make filesystem read-only
		readOnlyFs := afero.NewReadOnlyFs(fs)

		// Should error when trying to write
		err = run(readOnlyFs, "AGENTS.md")
		assert.Error(t, err)
	})
}
