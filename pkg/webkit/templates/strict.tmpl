// strictHandler defines the handler with the necessary server interface and middleware.
type strictHandler struct {
    ssi StrictServerInterface
    plugs []webkit.Plug
}

func NewStrictHandler(ssi StrictServerInterface, plugs []webkit.Plug) *strictHandler {
    return &strictHandler{ssi: ssi, plugs: plugs}
}

{{range .}}
{{$opid := .OperationId}}
func (sh *strictHandler) {{$opid}}(ctx *webkit.Context{{genParamArgs .PathParams}}{{if .RequiresParamObject}}, params {{$opid}}Params{{end}}) error {
    var request {{$opid | ucFirst}}RequestObject

    // Handle path params
    {{range .PathParams -}}
        request.{{.GoName}} = {{.GoVariableName}}
    {{end -}}

    {{if .RequiresParamObject -}}
        request.Params = params
    {{end -}}

    {{ if .HasMaskedRequestContentTypes -}}
        request.ContentType = ctx.Request.Header.Get("Content-Type")
    {{end -}}

    {{$multipleBodies := gt (len .Bodies) 1 -}}
    {{range .Bodies -}}
        {{if $multipleBodies}}if strings.HasPrefix(ctx.Request.Header.Get("Content-Type"), "{{.ContentType}}") { {{end}}
            {{if .IsJSON }}
                var body {{$opid}}{{.NameTag}}RequestBody
                if err := ctx.BindJSON(&body); err != nil {
                    return ctx.JSON(http.StatusBadRequest, fmt.Errorf("can't decode JSON body: %w", err))
                }
                request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
            {{else if eq .NameTag "Formdata" -}}
                if err := ctx.Request.ParseForm(); err != nil {
                    return ctx.JSON(http.StatusBadRequest, fmt.Errorf("can't decode formdata: %w", err))
                }
                var body {{$opid}}{{.NameTag}}RequestBody
                if err := runtime.BindForm(&body, ctx.Request.Form, nil, nil); err != nil {
                    return ctx.JSON(http.StatusBadRequest, fmt.Errorf("can't bind formdata: %w", err))
                }
                request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
            {{else if eq .NameTag "Multipart" -}}
                if reader, err := ctx.Request.MultipartReader(); err != nil {
                    return ctx.JSON(http.StatusBadRequest, fmt.Errorf("can't decode multipart body: %w", err))
                } else {
                    request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = reader
                }
            {{else if eq .NameTag "Text" -}}
                data, err := io.ReadAll(ctx.Request.Body)
                if err != nil {
                    return ctx.JSON(http.StatusBadRequest, fmt.Errorf("can't read body: %w", err))
                }
                body := {{$opid}}{{.NameTag}}RequestBody(data)
                request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = &body
            {{else -}}
                request.{{if $multipleBodies}}{{.NameTag}}{{end}}Body = ctx.Request.Body
            {{end}}{{/* if eq .NameTag "JSON" */ -}}
        {{if $multipleBodies}}}{{end}}
    {{end}}{{/* range .Bodies */}}

    // Middleware handler chain
    handler := func(ctx *webkit.Context) error {
        response, err := sh.ssi.{{$opid}}(ctx, request)
        if err != nil {
            return ctx.JSON(http.StatusInternalServerError, err)
        }

        // Handle valid responses
        if validResponse, ok := response.({{$opid | ucFirst}}ResponseObject); ok {
            return ctx.JSON(http.StatusOK, validResponse)
        } else if response != nil {
            return ctx.JSON(http.StatusInternalServerError, fmt.Errorf("unexpected response type: %T", response))
        }
        return nil
    }

    // Apply middlewares
    for _, plug := range sh.plugs {
        handler = plug(handler)
    }

    return handler(ctx)
}
{{end}}
