package payload

import (
	"context"
	"fmt"
	"io"
	"strings"

	"github.com/goccy/go-json"
	"github.com/perimeterx/marshmallow"

	"github.com/ainsleydev/webkit/pkg/adapters/payload/internal/tpl"
)

// Form defines a singular form collection type in the Form Builder Plugin
// within Payload CMS
//
// See: https://payloadcms.com/docs/plugins/form-builder
//
// Blocks example within the frontend:
// https://github.com/payloadcms/payload/tree/main/examples/form-builder/next-pages/components/Blocks
//
// TypeScript Bindings:
// https://github.com/payloadcms/payload/blob/main/packages/plugin-form-builder/src/types.ts
type Form struct {
	// The ID of the block, this is generated by Payload and is used to
	// uniquely identify the block.
	ID float64 `json:"id"`

	// The title of the form, this is used to identify the form in the CMS.
	Title string `json:"title"`

	// The fields that appear in the form.
	Fields []FormField `json:"fields,omitempty"`

	// A label that is used to submit the form (e.g. "Submit", "Get In Touch")
	SubmitButtonLabel *string `json:"submitButtonLabel,omitempty"`

	// The type of confirmation message to display after submitting the form.
	ConfirmationType FormConfirmationType `json:"confirmationType,omitempty"`

	// Only appears when ConfirmationType is "message"
	// RichText, can be Slate or Lexical
	ConfirmationMessage any `json:"confirmationMessage,omitempty"`

	// Only appears when ConfirmationType is "redirect"
	Redirect *FormRedirect `json:"redirect,omitempty"`

	// Optional
	Emails []FormEmail `json:"emails,omitempty"`

	// Timestamps for when the item was created and last updated.
	// These are included by default from Payload.
	UpdatedAt string `json:"updatedAt"`
	CreatedAt string `json:"createdAt"`

	// Arbitrary key-value pairs of any other fields that appear within
	// the schema but are not defined in the struct.
	Extra map[string]any `json:"-"`

	// RawJSON is the raw byte slice of the block, which can be used to decode
	// the block into a specific type.
	RawJSON json.RawMessage `json:"-"`
}

// UnmarshalJSON unmarshalls the JSON data into the Settings type.
// This method is used to extract known fields and assign the remaining
// fields to the Extra map.
func (f *Form) UnmarshalJSON(data []byte) error {
	var temp Form
	result, err := marshmallow.Unmarshal(data,
		&temp,
		marshmallow.WithExcludeKnownFieldsFromMap(true),
	)
	if err != nil {
		return err
	}

	*f = temp
	f.Extra = result

	return nil
}

// Render renders the form block to the provided writer as
// a form element.
func (f *Form) Render(_ context.Context, w io.Writer) error {
	return tpl.Templates.ExecuteTemplate(w, "form.html", f)
}

// ButtonLabel returns a label for the form's submit button.
func (f *Form) ButtonLabel(defaultLabel string) string {
	if defaultLabel == "" {
		defaultLabel = "Submit"
	}
	if f.SubmitButtonLabel == nil {
		return defaultLabel
	}
	return *f.SubmitButtonLabel
}

// FormField represents a field in the Payload form builder.
type FormField struct {
	// Tabs that appear in all block types.
	ID        string        `json:"id,omitempty"`
	BlockType FormBlockType `json:"blockType"`
	Name      string        `json:"name"`
	Label     string        `json:"label,omitempty"`
	Width     *int          `json:"width,omitempty"`
	Required  *bool         `json:"required,omitempty"`
	// One of the following fields must be present, depending on blockType
	DefaultValue *bool            `json:"defaultValue,omitempty"`
	BlockName    *string          `json:"blockName,omitempty"`
	Message      []map[string]any `json:"message,omitempty"`
	Options      []FormOption     `json:"options,omitempty"`
}

// formFieldRenderers defines the renderers for each form field type.
var formFieldRenderers = map[FormBlockType]func(*FormField) string{
	FormBlockTypeText: func(f *FormField) string {
		return fmt.Sprintf(`<input class="form-input" type="text" name="%s" id="%s" />`, f.Name, f.ID)
	},
	FormBlockTypeEmail: func(f *FormField) string {
		return fmt.Sprintf(`<input class="form-input" type="email" name="%s" id="%s" />`, f.Name, f.ID)
	},
	FormBlockTypeTextarea: func(f *FormField) string {
		return fmt.Sprintf(`<textarea class="form-input form-textarea" rows="6" name="%s" id="%s"></textarea>`, f.Name, f.ID)
	},
}

// Render renders the form field to the provided writer as
// a form <input> element.
func (f *FormField) Render(_ context.Context, w io.Writer) error {
	r, ok := formFieldRenderers[f.BlockType]
	if !ok {
		return fmt.Errorf("no renderer found for block type %s", f.BlockType)
	}
	_, err := io.WriteString(w, r(f))
	return err
}

// FormBlockType defines the type of field within a form.
// See: https://payloadcms.com/docs/plugins/form-builder#fields for more info.
type FormBlockType string

// String implements the fmt.Stringer interface for FormBlockType.
func (f *FormBlockType) String() string {
	if f == nil {
		return ""
	}
	return string(*f)
}

// UnmarshalJSON unmarshals the JSON data into the FormBlockType type.
// Marshmallow doesn't seem to handle custom types.
func (f *FormBlockType) UnmarshalJSON(data []byte) error {
	*f = FormBlockType(strings.ReplaceAll(string(data), `"`, ""))
	return nil
}

const (
	// FormBlockTypeCheckbox maps to a checkbox input on your front-end.
	// Used to collect a boolean value.
	FormBlockTypeCheckbox FormBlockType = "checkbox"

	// FormBlockTypeCountry maps to a select input on your front-end.
	// Used to collect a country.
	FormBlockTypeCountry FormBlockType = "country"

	// FormBlockTypeEmail maps to a text input with type email on your front-end.
	// Used to collect an email address.
	FormBlockTypeEmail FormBlockType = "email"

	// FormBlockTypeMessage maps to a RichText component on your front-end.
	// Used to display an arbitrary message to the user anywhere in the form.
	//
	// Not currently supported by WebKit.
	FormBlockTypeMessage FormBlockType = "message"

	// FormBlockTypeNumber maps to a number input on your front-end.
	// Used to collect a number.
	FormBlockTypeNumber FormBlockType = "number"

	// FormBlockTypeSelect maps to a select input on your front-end.
	// Used to display a list of options.
	FormBlockTypeSelect FormBlockType = "select"

	// FormBlockTypeState maps to a select input on your front-end.
	// Used to collect a US state.
	//
	// Not currently supported by WebKit (No US-specific features).
	FormBlockTypeState FormBlockType = "state"

	// FormBlockTypeText maps to a text input in your front-end.
	// Used to collect a simple string.
	FormBlockTypeText FormBlockType = "text"

	// FormBlockTypeTextarea maps to a textarea input on your front-end.
	// Used to collect a multi-line string.
	FormBlockTypeTextarea FormBlockType = "textarea"

	// FormBlockTypePayment is used to collect payments from forms.
	// Upon submission, the handlePayment callback is executed with the form and submission data.
	// You can use this to integrate with any third-party payment processing API.
	//
	// Not currently supported by WebKit
	FormBlockTypePayment FormBlockType = "payment"
)

// FormConfirmationType defines the way in which a user is directed after submitting a form.
type FormConfirmationType string

const (
	// FormConfirmationTypeMessage displays a message to the user after submitting the form.
	FormConfirmationTypeMessage FormConfirmationType = "message"
	// FormConfirmationTypeRedirect redirects the user to a new page after submitting the form.
	FormConfirmationTypeRedirect FormConfirmationType = "redirect"
)

// FormRedirect defines the type of confirmation message to display after
type FormRedirect struct {
	URL string `json:"url"`
}

// FormOption defines a singular option within a select field.
type FormOption struct {
	ID    *string `json:"id,omitempty"`
	Label string  `json:"label"`
	Value string  `json:"value"`
}

// FormEmail represents an email configuration for a form.
type FormEmail struct {
	ID        *string          `json:"id,omitempty"`
	EmailTo   *string          `json:"emailTo,omitempty"`
	CC        *string          `json:"cc,omitempty"`
	BCC       *string          `json:"bcc,omitempty"`
	ReplyTo   *string          `json:"replyTo,omitempty"`
	EmailFrom *string          `json:"emailFrom,omitempty"`
	Subject   string           `json:"subject"`
	Message   []map[string]any `json:"message,omitempty"`
}
