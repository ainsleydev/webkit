package payload

import (
	"github.com/goccy/go-json"
	"github.com/perimeterx/marshmallow"

	"github.com/ainsleydev/webkit/pkg/util/random"
)

// Block defines a common structure of a singular block layout
// from PayloadCMS.
//
// See: https://payloadcms.com/docs/fields/blocks
type Block struct {
	// The ID of the block, this is generated by Payload and is used to
	// uniquely identify the block.
	ID string `json:"id,omitempty"`

	// The block type is saved as the slug of the block that has been selected.
	BlockType string `json:"blockType"`

	// The Admin panel provides each block with a blockName field which optionally
	// allows editors to label their blocks for better readability.
	BlockName *string `json:"blockName,omitempty"`

	// Arbitrary key-value pairs of the block's fields, these pairs are defined by
	// the block's schema and vary depending on the block type.
	Fields map[string]any `json:"-"`

	// RawJSON is the raw byte slice of the block, which can be used to decode
	// the block into a specific type.
	RawJSON json.RawMessage
}

// Blocks is a collection of Block types.
type Blocks []Block

// Decode decodes the block's raw JSON into the provided interface.
// This is optional, to be more performant, you make just access
// the fields directly.
func (b *Block) Decode(v any) error {
	return json.Unmarshal(b.RawJSON, v)
}

// SafeID generates a safe ID for the block instead of using the
// ID provided by Payload which contains numbers, inherently
// this is not a valid selector for HTML/CSS.
func (b *Block) SafeID() string {
	return random.Alpha(24)
}

// UnmarshalJSON unmarshalls the JSON data into the Block type.
// This method is used to extract known fields and assign the remaining
// fields to the Fields map.
func (b *Block) UnmarshalJSON(data []byte) error {
	var temp Block
	result, err := marshmallow.Unmarshal(data,
		&temp,
		marshmallow.WithExcludeKnownFieldsFromMap(true),
	)
	if err != nil {
		return err
	}

	*b = temp
	b.RawJSON = data
	b.Fields = result

	return nil
}
