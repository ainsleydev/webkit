// Code generated by MockGen. DO NOT EDIT.
// Source: sops.go
//
// Generated by this command:
//
//	mockgen -source=sops.go -destination ../../mocks/sops.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockEncrypter is a mock of Encrypter interface.
type MockEncrypter struct {
	ctrl     *gomock.Controller
	recorder *MockEncrypterMockRecorder
	isgomock struct{}
}

// MockEncrypterMockRecorder is the mock recorder for MockEncrypter.
type MockEncrypterMockRecorder struct {
	mock *MockEncrypter
}

// NewMockEncrypter creates a new mock instance.
func NewMockEncrypter(ctrl *gomock.Controller) *MockEncrypter {
	mock := &MockEncrypter{ctrl: ctrl}
	mock.recorder = &MockEncrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncrypter) EXPECT() *MockEncrypterMockRecorder {
	return m.recorder
}

// Encrypt mocks base method.
func (m *MockEncrypter) Encrypt(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncrypterMockRecorder) Encrypt(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncrypter)(nil).Encrypt), filePath)
}

// MockDecrypter is a mock of Decrypter interface.
type MockDecrypter struct {
	ctrl     *gomock.Controller
	recorder *MockDecrypterMockRecorder
	isgomock struct{}
}

// MockDecrypterMockRecorder is the mock recorder for MockDecrypter.
type MockDecrypterMockRecorder struct {
	mock *MockDecrypter
}

// NewMockDecrypter creates a new mock instance.
func NewMockDecrypter(ctrl *gomock.Controller) *MockDecrypter {
	mock := &MockDecrypter{ctrl: ctrl}
	mock.recorder = &MockDecrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDecrypter) EXPECT() *MockDecrypterMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockDecrypter) Decrypt(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockDecrypterMockRecorder) Decrypt(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockDecrypter)(nil).Decrypt), filePath)
}

// MockEncrypterDecrypter is a mock of EncrypterDecrypter interface.
type MockEncrypterDecrypter struct {
	ctrl     *gomock.Controller
	recorder *MockEncrypterDecrypterMockRecorder
	isgomock struct{}
}

// MockEncrypterDecrypterMockRecorder is the mock recorder for MockEncrypterDecrypter.
type MockEncrypterDecrypterMockRecorder struct {
	mock *MockEncrypterDecrypter
}

// NewMockEncrypterDecrypter creates a new mock instance.
func NewMockEncrypterDecrypter(ctrl *gomock.Controller) *MockEncrypterDecrypter {
	mock := &MockEncrypterDecrypter{ctrl: ctrl}
	mock.recorder = &MockEncrypterDecrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncrypterDecrypter) EXPECT() *MockEncrypterDecrypterMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockEncrypterDecrypter) Decrypt(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockEncrypterDecrypterMockRecorder) Decrypt(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockEncrypterDecrypter)(nil).Decrypt), filePath)
}

// Encrypt mocks base method.
func (m *MockEncrypterDecrypter) Encrypt(filePath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", filePath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncrypterDecrypterMockRecorder) Encrypt(filePath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncrypterDecrypter)(nil).Encrypt), filePath)
}
