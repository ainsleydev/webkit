package docsutil

import (
	"fmt"
	"os"
	"path/filepath"

	"github.com/pkg/errors"
	"github.com/spf13/afero"
)

// Template is an alias for a template file name automatically
// generated by Webkit
type Template string

// Template constants.
const (
	CodeStyleTemplate Template = "CODE_STYLE.md"
	PayloadTemplate   Template = "PAYLOAD.md"
	SvelteKitTemplate Template = "SVELTEKIT.md"
)

// String implements fmt.Stringer on the Template.
func (t Template) String() string {
	return string(t)
}

const (
	// genDocsDir is the directory for generated documentation files.
	genDocsDir = "internal/gen/docs"

	// customDocsDir is the directory for custom documentation content.
	customDocsDir = "docs"

	// agentsFilename is the name of the custom agents file.
	agentsFilename = "AGENTS.md"
)

// LoadGenFile loads a generated documentation file from internal/gen/docs/.
func LoadGenFile(fs afero.Fs, tpl Template) (string, error) {
	return readFile(fs, filepath.Join(genDocsDir, string(tpl)))
}

// MustLoadGenFile loads a generated documentation file and exits if it fails.
func MustLoadGenFile(fs afero.Fs, tpl Template) string {
	content, err := LoadGenFile(fs, tpl)
	if err != nil {
		panic(err)
	}
	return content
}

// LoadCustomContent loads custom documentation content from docs/AGENTS.md.
func LoadCustomContent(fs afero.Fs) (string, error) {
	return readFile(fs, filepath.Join(customDocsDir, agentsFilename))
}

func readFile(fs afero.Fs, path string) (string, error) {
	content, err := afero.ReadFile(fs, path)
	if errors.Is(err, afero.ErrFileNotFound) || errors.Is(err, os.ErrNotExist) {
		return "", fmt.Errorf("doc template does not exist: %s", path)
	} else if err != nil {
		return "", errors.Wrap(err, "reading file")
	}
	return string(content), nil
}
