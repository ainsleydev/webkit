name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

# Prevent concurrent deployments.
concurrency:
  group: {{ ghVar "github.workflow" }}-{{ ghVar "github.ref" }}
  cancel-in-progress: true

jobs:
  # Build Containers
  build-and-push:
    name: Build and Push to GHCR
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
{{- range .Apps }}
          - name: {{ .Name }}
            context: ./{{ .Path }}
            dockerfile: ./{{ .Path }}/{{ .Build.Dockerfile }}
{{- end }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: {{ ghVar "github.actor" }}
          password: {{ ghSecret "GITHUB_TOKEN" }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/{{ ghVar "github.repository_owner" }}/{{ ghVar "github.event.repository.name" }}-{{ ghVar "matrix.service.name" }}
          tags: |
            type=raw,value=latest
            type=sha,format=long

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: {{ ghVar "matrix.service.context" }}
          file: {{ ghVar "matrix.service.dockerfile" }}
          push: true
          platforms: linux/amd64
          tags: {{ ghVar "steps.meta.outputs.tags" }}
          labels: {{ ghVar "steps.meta.outputs.labels" }}
          cache-from: type=registry,ref=ghcr.io/{{ ghVar "github.repository_owner" }}/{{ ghVar "github.event.repository.name" }}-{{ ghVar "matrix.service.name" }}:cache
          cache-to: type=registry,ref=ghcr.io/{{ ghVar "github.repository_owner" }}/{{ ghVar "github.event.repository.name" }}-{{ ghVar "matrix.service.name" }}:cache,mode=max

  # Remove Unwanted Containers
  cleanup:
    name: Cleanup Containers
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      packages: write
    strategy:
      matrix:
        service: [{{ range $i, $app := .Apps }}{{ if $i }}, {{ end }}{{ $app.Name }}{{ end }}]
    steps:
      - name: Delete old images from GHCR
        uses: actions/delete-package-versions@v5
        with:
          package-name: '{{ ghVar "github.event.repository.name" }}-{{ ghVar "matrix.service" }}'
          package-type: 'container'
          min-versions-to-keep: 5
          delete-only-untagged-versions: false

{{- range .Apps }}
{{- if and (eq .Infra.Provider "digitalocean") (eq .Infra.Type "container") }}

  # Deploy {{ .Title }} to DigitalOcean App Platform
  deploy-{{ .Name }}:
    name: Deploy {{ .Title }}
    runs-on: ubuntu-latest
    needs: build-and-push
    environment:
      name: production-{{ .Name }}
      {{- if index .Infra.Config "domain" }}
      url: https://{{ index .Infra.Config "domain" }}
      {{- end }}
    steps:
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.REPO_DO_ACCESS_TOKEN || secrets.ORG_DO_ACCESS_TOKEN }}

      - name: Deploy to DigitalOcean App Platform
        run: |
          set -euo pipefail

          APP_NAME='{{ ghVar "github.event.repository.name" }}-{{ .Name }}'

          echo "Looking up app: $APP_NAME"

          # Get the app ID from the app name
          APP_ID=$(doctl apps list --format ID,Spec.Name --no-header | grep "$APP_NAME" | awk '{print $1}')

          if [ -z "$APP_ID" ]; then
            echo "Error: App '$APP_NAME' not found in DigitalOcean"
            echo "Available apps:"
            doctl apps list --format ID,Spec.Name
            exit 1
          fi

          echo "Found app ID: $APP_ID"
          echo "Triggering deployment for {{ .Title }}..."

          # Create a new deployment and wait for it to complete
          doctl apps create-deployment "$APP_ID" --wait

          echo "Deployment completed successfully for {{ .Title }}"
{{- end }}
{{- end }}
