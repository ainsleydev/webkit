name: Backup

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # Runs daily at 2 AM

jobs:
{{- range .Resources }}
{{- if eq .Type "postgres" }}
  backup-{{ .Name }}:
    name: Backup {{ .Name }} Database to BackBlaze
    runs-on: ubuntu-latest
    env:
      BUCKET_NAME: '{{ $.BucketName }}'
      BACKUP_PATH: '/backups/{{ .Name }}/'
      DO_ACCESS_TOKEN: ${{"{{"}} secrets.REPO_DO_ACCESS_TOKEN || secrets.ORG_DO_ACCESS_TOKEN {{ "}}" }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: {{ ghEnv "DO_ACCESS_TOKEN" }}

      - name: Add Runner IP to Database
        uses: ./.github/actions/db-add-ip
        with:
          database-id: {{ ghSecret (index $.Data .Name "DatabaseID") }}
          doctl-token: {{ ghSecret "DO_ACCESS_TOKEN" }}

      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - name: Install PG Dump
        run: |
          sudo apt-get install -y wget gnupg
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt-get update
          sudo apt-get install -y postgresql-client-17

          echo "/usr/lib/postgresql/17/bin" >> $GITHUB_PATH

      - name: Verify pg_dump version
        run: |
          pg_dump --version  # Should be 17

      - name: Configure rclone for BackBlaze B2
        run: |
          rclone config create b2_backup b2 \
            account {{ ghSecret "ORG_BACK_BLAZE_KEY_ID" }} \
            key {{ ghSecret "ORG_BACK_BLAZE_APPLICATION_KEY" }}

      - name: Dump and Compress PostgreSQL Database
        env:
          DATABASE_URL: {{ ghSecret (index $.Data .Name "DatabaseURL") }}
        run: |
          # Fail on errors, undefined vars, and fail if any part of a pipe fails
          set -euo pipefail

          # Create vars
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          BACKUP_FILE="backup-$TIMESTAMP.sql.gz"

          # Dump and compress
          pg_dump "$DATABASE_URL" -O | gzip > "$BACKUP_FILE"

          # Verify file
          ls -lh "$BACKUP_FILE"
          gzip -l "$BACKUP_FILE"

          # Make the backup filename available to next steps
          echo "BACKUP_FILE=$BACKUP_FILE" >> $GITHUB_ENV

      - name: Upload Backup to B2
        run: |
          # TODO: The name of the bucket needs to somehow be dynamic, how can we tell what bucket to use and where? Do we do a global one?
          # Upload backup file to B2
          rclone copy $BACKUP_FILE b2_backup:${BUCKET_NAME}${BACKUP_PATH} \
            --progress

      - name: Retain only 30 latest backups
        run: |
          # Delete backups older than 30 days
          rclone delete b2_backup:${BUCKET_NAME}${BACKUP_PATH} --min-age 30d

      - name: Remove Runner IP from Database
        if: always()
        uses: ./.github/actions/db-remove-ip
        with:
          database-id: {{ ghSecret (index $.Data .Name "DatabaseID") }}
          doctl-token: {{ ghEnv "DO_ACCESS_TOKEN" }}

      - name: Notify Slack of Backup Failure
        if: failure()
        uses: ./.github/actions/slack-notify
        with:
          title: '{{ .Name }} Database Backup Failed'
          message: 'The scheduled database backup has failed.'
          status: 'failure'
          commit_sha: ${{"{{"}} github.sha }}
          slack_bot_token: ${{"{{"}} secrets.SLACK_BOT_TOKEN {{ "}}" }}
          channel_id: ${{"{{"}} secrets.SLACK_CHANNEL_ID {{ "}}" }}
{{- else if eq .Type "s3" }}
  backup-{{ .Name }}:
    name: Backup {{ .Name }} Bucket to Backblaze B2
    runs-on: ubuntu-latest
    timeout-minutes: 60 # 1 Hour
    env:
      BUCKET_NAME: '{{ $.BucketName }}'
      BACKUP_PATH: '/backups/{{ .Name }}/'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - name: Configure rclone for DigitalOcean Spaces
        run: |
          rclone config create do_spaces s3 \
            env_auth false \
            provider DigitalOcean \
            access_key_id {{ ghSecret "ORG_DO_SPACES_ACCESS_KEY" }} \
            secret_access_key {{ ghSecret "ORG_DO_SPACES_SECRET_KEY" }} \
            region {{ ghSecret (index $.Data .Name "Region") }} \
            endpoint https://{{ ghSecret (index $.Data .Name "Region") }}.digitaloceanspaces.com

      - name: Configure rclone for BackBlaze B2
        run: |
          rclone config create b2_backup b2 \
            account {{ ghSecret "ORG_BACK_BLAZE_KEY_ID" }} \
            key {{ ghSecret "ORG_BACK_BLAZE_APPLICATION_KEY" }}

      - name: Sync Bucket to B2
        run: |
          # Sync entire DO Spaces bucket to B2, deleting extraneous files
          rclone sync do_spaces:{{ ghSecret (index $.Data .Name "BucketName") }} b2_backup:${BUCKET_NAME}${BACKUP_PATH} \
            --progress --transfers=16 --checkers=16 --delete-excluded

      - name: Verify Backup
        run: |
          echo "Backup completed successfully!"
{{- end }}
{{- end }}

  backup-codebase:
    name: Backup GitHub Repository to Backblaze B2
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      BUCKET_NAME: '{{ $.BucketName }}'
      BACKUP_PATH: '/backups/codebase/'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Full git history

      - name: Create Compressed Archive
        run: |
          # Fail on errors, undefined vars, and fail if any part of a pipe fails
          set -euo pipefail

          # Create vars
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          BACKUP_FILE="codebase-backup-$TIMESTAMP.tar.gz"

          # Create compressed archive of entire repository (including .git)
           git archive --format=tar.gz -o "$BACKUP_FILE" HEAD

          # Verify file
          ls -lh "$BACKUP_FILE"

          # Make the backup filename available to next steps
          echo "BACKUP_FILE=$BACKUP_FILE" >> $GITHUB_ENV

      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - name: Configure rclone for BackBlaze B2
        run: |
          rclone config create b2_backup b2 \
            account {{ ghSecret "ORG_BACK_BLAZE_KEY_ID" }} \
            key {{ ghSecret "ORG_BACK_BLAZE_APPLICATION_KEY" }}

      - name: Upload Backup to B2
        run: |
          # Upload backup file to B2
          rclone copy $BACKUP_FILE b2_backup:${BUCKET_NAME}${BACKUP_PATH} \
            --progress

      - name: Retain only 30 latest backups
        run: |
          # Delete backups older than 30 days
          rclone delete b2_backup:${BUCKET_NAME}${BACKUP_PATH} --min-age 30d

      - name: Verify Backup
        run: |
          echo "Codebase backup completed successfully!"

      - name: Notify Slack of Backup Failure
        if: failure()
        uses: ./.github/actions/slack-notify
        with:
          title: 'Codebase Backup Failed'
          message: 'The scheduled GitHub repository backup has failed.'
          status: 'failure'
          commit_sha: ${{"{{"}} github.sha }}
          slack_bot_token: ${{"{{"}} secrets.SLACK_BOT_TOKEN {{ "}}" }}
          channel_id: ${{"{{"}} secrets.SLACK_CHANNEL_ID {{ "}}" }}

  sync-to-gdrive:
    name: Sync Backblaze B2 to Google Drive
    runs-on: ubuntu-latest
    timeout-minutes: 120 # 2 Hours
    needs:
      - backup-codebase
{{- range .Resources }}
      - backup-{{ .Name }}
{{- end }}
    env:
      BUCKET_NAME: '{{ $.BucketName }}'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - name: Configure rclone for Backblaze B2
        run: |
          rclone config create b2_backup b2 \
            account {{ ghSecret "ORG_BACK_BLAZE_KEY_ID" }} \
            key {{ ghSecret "ORG_BACK_BLAZE_APPLICATION_KEY" }}

      - name: Configure rclone for Google Drive
        env:
          GDRIVE_SA_JSON: {{ ghSecret "ORG_GOOGLE_DRIVE_SA_JSON" }}
          GDRIVE_SHARED_DRIVE_ID: {{ ghSecret "ORG_GOOGLE_DRIVE_FOLDER_ID" }}
        run: |
          # Create service account credentials file
          echo "$GDRIVE_SA_JSON" > /tmp/gdrive-sa.json

          # Configure Google Drive remote using service account with Shared Drive
          rclone config create gdrive drive \
            scope drive \
            service_account_file /tmp/gdrive-sa.json \
            team_drive "$GDRIVE_SHARED_DRIVE_ID"

      - name: Sync B2 to Google Drive
        run: |
          # Fail on errors, undefined vars, and fail if any part of a pipe fails
          set -euo pipefail

          # Sync entire B2 bucket to Google Drive Shared Drive
          # Structure: {shared-drive}/{project-name}/backups/...
          # The bucket name folder (e.g., search-spares) will be created automatically
          rclone sync b2_backup:${BUCKET_NAME} gdrive:${BUCKET_NAME} \
            --progress \
            --transfers=8 \
            --checkers=8 \
            --drive-chunk-size=64M \
            --exclude ".DS_Store" \
            --exclude "Thumbs.db" \
            --stats=30s \
            --stats-one-line \
            --stats-one-line-date \
            --stats-log-level NOTICE

      - name: Verify Sync
        run: |
          echo "Verifying sync to Google Drive Shared Drive..."

          # List files in Google Drive Shared Drive to verify
          rclone lsd gdrive:${BUCKET_NAME} --max-depth 2

          echo "Google Drive sync completed successfully!"

      - name: Cleanup Credentials
        if: always()
        run: |
          # Remove service account credentials file
          rm -f /tmp/gdrive-sa.json

      - name: Notify Slack of Sync Failure
        if: failure()
        uses: ./.github/actions/slack-notify
        with:
          title: 'Google Drive Sync Failed'
          message: 'The backup synchronisation to Google Drive has failed.'
          status: 'failure'
          commit_sha: ${{"{{"}} github.sha }}
          slack_bot_token: ${{"{{"}} secrets.SLACK_BOT_TOKEN {{ "}}" }}
          channel_id: ${{"{{"}} secrets.SLACK_CHANNEL_ID {{ "}}" }}
