package version

import (
	"io"
	"os"
	"strings"
	"testing"

	"github.com/spf13/afero"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/ainsleydev/webkit/internal/manifest"
	"github.com/ainsleydev/webkit/internal/printer"
	"github.com/ainsleydev/webkit/internal/scaffold"
)

func TestGenerateVersionFile(t *testing.T) {
	t.Parallel()

	tt := map[string]struct {
		input VersionInfo
		want  []string // Strings that should be present in the generated file
	}{
		"Custom Version Info": {
			input: VersionInfo{
				Version: "v1.2.3",
				Commit:  "abc123",
				Date:    "2024-01-01",
				BuiltBy: "goreleaser",
			},
			want: []string{
				`generatedVersion = "v1.2.3"`,
				`generatedCommit  = "abc123"`,
				`generatedDate    = "2024-01-01"`,
				`generatedBuiltBy = "goreleaser"`,
			},
		},
		"Default Version Info": {
			input: DefaultVersionInfo(),
			want: []string{
				`generatedVersion = "v0.0.1-dev"`,
				`generatedCommit  = "none"`,
				`generatedBuiltBy = "local"`,
			},
		},
	}

	for name, test := range tt {
		t.Run(name, func(t *testing.T) {
			t.Parallel()

			fs := afero.NewMemMapFs()
			console := printer.New(io.Discard)

			if !testing.Verbose() {
				console.SetWriter(os.Stdout)
			}

			tracker := manifest.NewTracker()
			gen := scaffold.New(fs, tracker, console)

			err := GenerateVersionFile(fs, gen, test.input)
			require.NoError(t, err)

			got, readErr := afero.ReadFile(fs, "internal/version/version.gen.go")
			require.NoError(t, readErr)

			content := string(got)
			for _, expected := range test.want {
				assert.Contains(t, content, expected, "Expected content to contain: %s", expected)
			}

			assert.Contains(t, content, "// Code generated by WebKit version generator. DO NOT EDIT.")
			assert.Contains(t, content, "package version")
		})
	}
}

func TestDefaultVersionInfo(t *testing.T) {
	t.Parallel()

	info := DefaultVersionInfo()

	assert.Equal(t, "v0.0.1-dev", info.Version)
	assert.Equal(t, "none", info.Commit)
	assert.Equal(t, "local", info.BuiltBy)
	assert.NotEmpty(t, info.Date)
}

func TestGenerateVersionFile_CreatesDirectories(t *testing.T) {
	t.Parallel()

	fs := afero.NewMemMapFs()
	console := printer.New(io.Discard)
	tracker := manifest.NewTracker()
	gen := scaffold.New(fs, tracker, console)

	info := VersionInfo{
		Version: "v1.0.0",
		Commit:  "test",
		Date:    "2024-01-01",
		BuiltBy: "test",
	}

	err := GenerateVersionFile(fs, gen, info)
	require.NoError(t, err)

	exists, err := afero.DirExists(fs, "internal/version")
	require.NoError(t, err)
	assert.True(t, exists, "Expected directory to be created")
}

func TestGenerateVersionFile_ValidGoCode(t *testing.T) {
	t.Parallel()

	fs := afero.NewMemMapFs()
	console := printer.New(io.Discard)
	tracker := manifest.NewTracker()
	gen := scaffold.New(fs, tracker, console)

	info := VersionInfo{
		Version: "v1.0.0",
		Commit:  "abc123",
		Date:    "2024-01-01",
		BuiltBy: "test",
	}

	err := GenerateVersionFile(fs, gen, info)
	require.NoError(t, err)

	got, readErr := afero.ReadFile(fs, "internal/version/version.gen.go")
	require.NoError(t, readErr)

	content := string(got)

	// Verify it looks like valid Go code
	assert.True(t, strings.HasPrefix(content, "//"), "Expected file to start with a comment")
	assert.Contains(t, content, "package version")
	assert.Contains(t, content, "const (")
	assert.Contains(t, content, "generatedVersion")
	assert.Contains(t, content, "generatedCommit")
	assert.Contains(t, content, "generatedDate")
	assert.Contains(t, content, "generatedBuiltBy")
}
