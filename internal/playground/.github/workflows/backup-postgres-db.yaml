# Code generated by webkit; DO NOT EDIT.
name: Backup Database

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # Runs daily at 2 AM

jobs:
  backup-postgres:
    name: Backup Database to BackBlaze
    runs-on: ubuntu-latest
    env:
      BACKUP_PATH: '/backups/db/'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.ORG_DO_ACCESS_TOKEN }}

      - name: Add Runner IP to Database
        uses: ./.github/actions/db-add-ip
        with:
          database-id: ${{ secrets.TF_PROD_DB_ID }}
          doctl-token: ${{ secrets.ORG_DO_ACCESS_TOKEN }}

      - name: Dump and Compress PostgreSQL Database
        env:
          DATABASE_URL: ${{ secrets.TF_PROD_DB_CONNECTION_URL }}
        run: |
          # Install PostgreSQL client
          sudo apt-get update && sudo apt-get install -y postgresql-client

          # Generate timestamp
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")

          # Dump and compress in one step
          pg_dump "$DATABASE_URL" -O | gzip > backup-$TIMESTAMP.sql.gz

          # Make the backup filename available to next steps
          echo "BACKUP_FILE=backup-$TIMESTAMP.sql.gz" >> $GITHUB_ENV

      - name: Set up S3cmd for B2
        uses: s3-actions/s3cmd@v2.0.1
        with:
          provider: backblaze
          region: ""
          access_key: ${{ secrets.ORG_BACK_BLAZE_KEY_ID }}
          secret_key: ${{ secrets.ORG_BACK_BLAZE_APPLICATION_KEY }}

      - name: Upload Backup to S3
        run: |
          s3cmd put --acl-private $BACKUP_FILE s3://${{ secrets.ORG_BACK_BLAZE_BUCKET }}${BACKUP_PATH}

      - name: Retain only 30 latest backups
        run: |
          # List backups, skip newest 30, delete the rest
          s3cmd ls s3://${{ secrets.ORG_BACK_BLAZE_BUCKET }}${BACKUP_PATH} \
          | sort -k1,2 \
          | head -n -30 \
          | awk '{print $4}' \
          | xargs -r s3cmd del

      - name: Remove Runner IP from Database
        if: always()
        uses: ./.github/actions/db-remove-ip
        with:
          database-id: ${{ secrets.TF_PROD_DB_ID }}
          doctl-token: ${{ secrets.ORG_DO_ACCESS_TOKEN }}

      - name: Notify Slack of Backup Failure
        if: failure()
        uses: ./.github/actions/slack-notify
        with:
          title: 'Database Backup Failed'
          message: 'The scheduled database backup has failed.'
          status: 'failure'
          commit_sha: ${{ github.sha }}
          slack_bot_token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
