# Code generated by webkit; DO NOT EDIT.
name: Backup Resources

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # Runs daily at 2 AM

jobs:
  backup-db:
    name: Backup db Database to BackBlaze
    runs-on: ubuntu-latest
    env:
      BUCKET_NAME: 'my-website'
      BACKUP_PATH: '/backups/db/'
      DO_ACCESS_TOKEN: ${{ secrets.REPO_DO_ACCESS_TOKEN || secrets.ORG_DO_ACCESS_TOKEN }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ env.DO_ACCESS_TOKEN }}

      - name: Add Runner IP to Database
        uses: ./.github/actions/db-add-ip
        with:
          database-id: ${{ secrets.TF_PROD_DB_ID }}
          doctl-token: ${{ secrets.DO_ACCESS_TOKEN }}

      - name: Install PG Dump
        run: |
          sudo apt-get install -y wget gnupg
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt/ $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          sudo apt-get update
          sudo apt-get install -y postgresql-client-17

          echo "/usr/lib/postgresql/17/bin" >> $GITHUB_PATH

      - name: Verify pg_dump version
        run: |
          pg_dump --version  # Should be 17

      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - name: Configure rclone for BackBlaze B2
        run: |
          rclone config create b2_backup b2 \
            account ${{ secrets.ORG_BACK_BLAZE_KEY_ID }} \
            key $${{ secrets.ORG_BACK_BLAZE_APPLICATION_KEY }}

      - name: Dump and Compress PostgreSQL Database
        env:
          DATABASE_URL: ${{ secrets.TF_PROD_DB_CONNECTION_URL }}
        run: |
          # Fail on errors, undefined vars, and fail if any part of a pipe fails
          set -euo pipefail

          # Create vars
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          BACKUP_FILE="backup-$TIMESTAMP.sql.gz"

          # Dump and compress
          pg_dump "$DATABASE_URL" -O | gzip > "$BACKUP_FILE"

          # Verify file
          ls -lh "$BACKUP_FILE"
          gzip -l "$BACKUP_FILE"

          # Make the backup filename available to next steps
          echo "BACKUP_FILE=$BACKUP_FILE" >> $GITHUB_ENV


      - name: Upload Backup to B2
        run: |
          # TODO: The name of the bucket needs to somehow be dynamic, how can we tell what bucket to use and where? Do we do a global one?
          # Upload backup file to B2
          rclone copy $BACKUP_FILE b2_backup:${BUCKET_NAME}${BACKUP_PATH} \
            --progress

      - name: Retain only 30 latest backups
        run: |
          # Delete backups older than 30 days
          rclone delete b2_backup:${BUCKET_NAME}{BACKUP_PATH} --min-age 30d

      - name: Remove Runner IP from Database
        if: always()
        uses: ./.github/actions/db-remove-ip
        with:
          database-id: ${{ secrets.TF_PROD_DB_ID }}
          doctl-token: ${{ env.DO_ACCESS_TOKEN }}

      - name: Notify Slack of Backup Failure
        if: failure()
        uses: ./.github/actions/slack-notify
        with:
          title: 'db Database Backup Failed'
          message: 'The scheduled database backup has failed.'
          status: 'failure'
          commit_sha: ${{ github.sha }}
          slack_bot_token: ${{ secrets.SLACK_BOT_TOKEN }}
          channel_id: ${{ secrets.SLACK_CHANNEL_ID }}
  backup-store:
    name: Backup store Bucket to Backblaze B2
    runs-on: ubuntu-latest
    timeout-minutes: 60 # 1 Hour
    env:
      BUCKET_NAME: 'my-website'
      BACKUP_PATH: '/backups/bucket/store/'

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash

      - name: Configure rclone for DigitalOcean Spaces
        run: |
          rclone config create do_spaces s3 \
            env_auth true \
            provider DigitalOcean \
            access_key_id ${{ secrets.ORG_DO_SPACES_ACCESS_KEY }} \
            secret_access_key ${{ secrets.ORG_DO_SPACES_SECRET_KEY }} \
            region ${{ secrets.TF_PROD_STORE_REGION }} \
            endpoint https://${{ secrets.TF_PROD_STORE_REGION }}.digitaloceanspaces.com

      - name: Configure rclone for BackBlaze B2
        run: |
          rclone config create b2_backup b2 \
            account ${{ secrets.ORG_BACK_BLAZE_KEY_ID }} \
            key ${{ secrets.ORG_BACK_BLAZE_APPLICATION_KEY }}

      - name: Sync Bucket to B2
        run: |
          # Sync entire DO Spaces bucket to B2, deleting extraneous files
          rclone sync do_spaces:${{ secrets.TF_PROD_STORE_BUCKET_NAME }} b2_backup:${BUCKET_NAME}{BACKUP_PATH} \
            --progress --transfers=16 --checkers=16 --delete-excluded

      - name: Verify Backup
        run: |
          echo "Backup completed successfully!"
