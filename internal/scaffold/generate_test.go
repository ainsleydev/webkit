package scaffold

import (
	"fmt"
	"os"
	"testing"
	"text/template"

	"github.com/goccy/go-json"
	"github.com/goccy/go-yaml"
	"github.com/spf13/afero"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestFileGenerator_Bytes(t *testing.T) {
	t.Parallel()

	tt := map[string]struct {
		fs      afero.Fs
		path    string
		data    []byte
		wantErr bool
	}{
		"MkdirAll Fails (read-only fs)": {
			fs:      afero.NewReadOnlyFs(afero.NewMemMapFs()),
			path:    "dir/file.txt",
			data:    []byte("hello"),
			wantErr: true,
		},
		//"WriteFile fails (path is directory)": {
		//	fs:      failWriteFs{afero.NewMemMapFs()},
		//	path:    "dir/file.txt",
		//	data:    []byte("hello"),
		//	wantErr: true,
		//},
		"Valid Write": {
			fs:      afero.NewMemMapFs(),
			path:    "dir/file.txt",
			data:    []byte("hello"),
			wantErr: false,
		},
	}

	for name, test := range tt {
		t.Run(name, func(t *testing.T) {
			t.Parallel()

			gen := New(test.fs)

			err := gen.Bytes(test.path, test.data)
			assert.Equal(t, test.wantErr, err != nil)

			fmt.Println(err)

			if !test.wantErr {
				got, _ := afero.ReadFile(test.fs, test.path)
				assert.Equal(t, test.data, got)
			}
		})
	}
}

func TestFileGenerator_Template(t *testing.T) {
	t.Parallel()

	path := "file.txt"
	gitIgnoreTpl := template.Must(template.New("gitignore").Parse(".DS_Store"))

	t.Run("Skips Scaffolding", func(t *testing.T) {
		t.Parallel()

		fs := afero.NewMemMapFs()
		gen := New(fs)

		err := afero.WriteFile(fs, path, []byte("data"), os.ModePerm)
		require.NoError(t, err)

		err = gen.Template(path, gitIgnoreTpl, nil, WithScaffoldMode())
		assert.NoError(t, err, "Scaffold is skipped, file exists")
	})

	t.Run("Template Fails", func(t *testing.T) {
		t.Parallel()

		fs := afero.NewMemMapFs()
		gen := New(fs)
		tpl := template.Must(template.New("test").Parse("{{.NonExistentField.Method}}"))

		err := gen.Template(path, tpl, struct{}{})
		assert.Error(t, err, "Should return error when template execution fails")
		assert.ErrorContains(t, err, "executing template")
	})

	t.Run("Generates Successfully", func(t *testing.T) {
		t.Parallel()

		fs := afero.NewMemMapFs()
		gen := New(fs)
		err := gen.Template(".gitignore", gitIgnoreTpl, nil)
		assert.NoError(t, err)

		got, err := afero.ReadFile(fs, ".gitignore")
		assert.NoError(t, err)

		want := "# Code generated by webkit; DO NOT EDIT.\n.DS_Store"
		assert.Equal(t, want, string(got))
	})
}

func TestFileGenerator_JSON(t *testing.T) {
	t.Parallel()

	path := "file.json"
	jsonData := map[string]any{"project": "ainsley.dev"}
	jsonDataBytes, err := json.Marshal(jsonData)
	require.NoError(t, err)

	t.Run("Skips Scaffolding", func(t *testing.T) {
		t.Parallel()

		fs := afero.NewMemMapFs()
		gen := New(fs)

		err = afero.WriteFile(fs, path, jsonDataBytes, os.ModePerm)
		require.NoError(t, err)

		err = gen.JSON(path, "", WithScaffoldMode())
		assert.NoError(t, err, "Scaffold is skipped, file exists")
	})

	t.Run("Encoder Failure", func(t *testing.T) {
		t.Parallel()

		fs := afero.NewMemMapFs()
		gen := New(fs)

		err = gen.JSON(path, make(chan int))
		assert.Error(t, err)
		assert.ErrorContains(t, err, "encoding file.json")
	})

	t.Run("Generates Successfully", func(t *testing.T) {
		t.Parallel()

		fs := afero.NewMemMapFs()
		gen := New(fs)

		err = gen.JSON(path, jsonData)
		assert.NoError(t, err)

		got, err := afero.ReadFile(fs, path)
		assert.NoError(t, err)
		assert.JSONEq(t, string(jsonDataBytes), string(got))
	})
}

type badYAML struct{}

func (b badYAML) MarshalYAML() (interface{}, error) {
	return nil, fmt.Errorf("simulated failure")
}

func TestFileGenerator_YAML(t *testing.T) {
	t.Parallel()

	path := "file.yaml"
	yamlData := map[string]any{"project": "ainsley.dev"}
	yamlDataBytes, err := yaml.Marshal(yamlData)
	require.NoError(t, err)

	t.Run("Skips Scaffolding", func(t *testing.T) {
		t.Parallel()

		fs := afero.NewMemMapFs()
		gen := New(fs)

		err = afero.WriteFile(fs, path, yamlDataBytes, os.ModePerm)
		require.NoError(t, err)

		err = gen.YAML(path, "", WithScaffoldMode())
		assert.NoError(t, err, "Scaffold is skipped, file exists")
	})

	t.Run("Encoder Failure", func(t *testing.T) {
		t.Parallel()

		fs := afero.NewMemMapFs()
		gen := New(fs)

		err := gen.YAML("file.yaml", badYAML{})
		assert.Error(t, err)
		assert.ErrorContains(t, err, "encoding file.yaml")
	})

	t.Run("Generates Successfully", func(t *testing.T) {
		t.Parallel()

		fs := afero.NewMemMapFs()
		gen := New(fs)

		err = gen.YAML(path, yamlData)
		assert.NoError(t, err)

		got, err := afero.ReadFile(fs, path)
		assert.NoError(t, err)

		want := "# Code generated by webkit; DO NOT EDIT.\nproject: ainsley.dev\n"
		assert.Equal(t, string(want), string(got))
	})
}
