package scaffold

import (
	"fmt"
	"io"
	"os"
	"testing"
	"text/template"

	"github.com/goccy/go-json"
	"github.com/goccy/go-yaml"
	"github.com/spf13/afero"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/ainsleydev/webkit/internal/util/testutil"
)

func setup(t *testing.T) *FileGenerator {
	t.Helper()

	fs := afero.NewMemMapFs()
	gen := New(fs)

	if !testing.Verbose() {
		gen.Printer.SetWriter(io.Discard)
	}

	return gen
}

func TestFileGenerator_Bytes(t *testing.T) {
	t.Parallel()

	t.Run("MkdirAll Fails (read-only fs)", func(t *testing.T) {
		t.Parallel()

		gen := setup(t)
		gen.fs = afero.NewReadOnlyFs(afero.NewMemMapFs())

		err := gen.Bytes("dir/file.txt", []byte("hello"))
		assert.Error(t, err, "Expected error writing to read-only FS")
	})

	t.Run("WriteFile fails (path is directory)", func(t *testing.T) {
		t.Parallel()

		gen := setup(t)
		gen.fs = &testutil.AferoErrCreateFs{Fs: afero.NewMemMapFs()}

		err := gen.Bytes("dir/file.txt", []byte("hello"))
		assert.Error(t, err, "Expected error writing to path that is a directory")
	})

	t.Run("Updates Existing File", func(t *testing.T) {
		t.Parallel()

		gen := setup(t)
		fs := afero.NewMemMapFs()
		gen.fs = fs

		path := "dir/file.txt"
		initialData := []byte("old content")
		newData := []byte("new content")

		// Pre-create the file so it exists.
		err := afero.WriteFile(fs, path, initialData, os.ModePerm)
		require.NoError(t, err)

		err = gen.Bytes(path, newData)
		assert.NoError(t, err)

		// Check the file content was updated.
		got, readErr := afero.ReadFile(fs, path)
		assert.NoError(t, readErr)
		assert.Equal(t, newData, got)

		// TODO: Check printer output
	})

	t.Run("Valid Write", func(t *testing.T) {
		t.Parallel()

		gen := setup(t)
		gen.fs = afero.NewMemMapFs()

		data := []byte("hello")
		err := gen.Bytes("dir/file.txt", data)
		assert.NoError(t, err, "Expected successful write")

		got, readErr := afero.ReadFile(gen.fs, "dir/file.txt")
		assert.NoError(t, readErr)
		assert.Equal(t, data, got)
	})
}

func TestFileGenerator_Template(t *testing.T) {
	t.Parallel()

	path := "file.txt"
	gitIgnoreTpl := template.Must(template.New("gitignore").Parse(".DS_Store"))

	t.Run("Skips Scaffolding", func(t *testing.T) {
		t.Parallel()

		gen := setup(t)

		err := afero.WriteFile(gen.fs, path, []byte("data"), os.ModePerm)
		require.NoError(t, err)

		err = gen.Template(path, gitIgnoreTpl, nil, WithScaffoldMode())
		assert.NoError(t, err, "Scaffold is skipped, file exists")
	})

	t.Run("Template Fails", func(t *testing.T) {
		t.Parallel()

		gen := setup(t)
		tpl := template.Must(template.New("test").Parse("{{.NonExistentField.Method}}"))

		err := gen.Template(path, tpl, struct{}{})
		assert.Error(t, err, "Should return error when template execution fails")
		assert.ErrorContains(t, err, "executing template")
	})

	t.Run("Generates Successfully", func(t *testing.T) {
		t.Parallel()

		gen := setup(t)
		err := gen.Template(".gitignore", gitIgnoreTpl, nil)
		assert.NoError(t, err)

		got, err := afero.ReadFile(gen.fs, ".gitignore")
		assert.NoError(t, err)

		want := "# Code generated by webkit; DO NOT EDIT.\n.DS_Store"
		assert.Equal(t, want, string(got))
	})
}

func TestFileGenerator_JSON(t *testing.T) {
	t.Parallel()

	path := "file.json"
	jsonData := map[string]any{"project": "ainsley.dev"}
	jsonDataBytes, err := json.Marshal(jsonData)
	require.NoError(t, err)

	t.Run("Skips Scaffolding", func(t *testing.T) {
		t.Parallel()

		gen := setup(t)

		err = afero.WriteFile(gen.fs, path, jsonDataBytes, os.ModePerm)
		require.NoError(t, err)

		err = gen.JSON(path, "", WithScaffoldMode())
		assert.NoError(t, err, "Scaffold is skipped, file exists")
	})

	t.Run("Encoder Failure", func(t *testing.T) {
		t.Parallel()

		gen := setup(t)

		err = gen.JSON(path, make(chan int))
		assert.Error(t, err)
		assert.ErrorContains(t, err, "encoding file.json")
	})

	t.Run("Generates Successfully", func(t *testing.T) {
		t.Parallel()

		gen := setup(t)

		err = gen.JSON(path, jsonData)
		assert.NoError(t, err)

		got, err := afero.ReadFile(gen.fs, path)
		assert.NoError(t, err)
		assert.JSONEq(t, string(jsonDataBytes), string(got))
	})
}

type badYAML struct{}

func (b badYAML) MarshalYAML() (interface{}, error) {
	return nil, fmt.Errorf("simulated failure")
}

func TestFileGenerator_YAML(t *testing.T) {
	t.Parallel()

	path := "file.yaml"
	yamlData := map[string]any{"project": "ainsley.dev"}
	yamlDataBytes, err := yaml.Marshal(yamlData)
	require.NoError(t, err)

	t.Run("Skips Scaffolding", func(t *testing.T) {
		t.Parallel()

		gen := setup(t)

		err = afero.WriteFile(gen.fs, path, yamlDataBytes, os.ModePerm)
		require.NoError(t, err)

		err = gen.YAML(path, "", WithScaffoldMode())
		assert.NoError(t, err, "Scaffold is skipped, file exists")
	})

	t.Run("Encoder Failure", func(t *testing.T) {
		t.Parallel()

		gen := setup(t)

		err = gen.YAML("file.yaml", badYAML{})
		assert.Error(t, err)
		assert.ErrorContains(t, err, "encoding file.yaml")
	})

	t.Run("Generates Successfully", func(t *testing.T) {
		t.Parallel()

		gen := setup(t)

		err = gen.YAML(path, yamlData)
		assert.NoError(t, err)

		got, err := afero.ReadFile(gen.fs, path)
		assert.NoError(t, err)

		want := "# Code generated by webkit; DO NOT EDIT.\nproject: ainsley.dev\n"
		assert.Equal(t, string(want), string(got))
	})
}

func TestFileGenerator_ShouldSkipScaffold_NotExists(t *testing.T) {
	t.Parallel()

	gen := setup(t)

	path := "nonexistent.txt"
	got := gen.shouldSkipScaffold(path, ModeScaffold)
	assert.False(t, got)
}
