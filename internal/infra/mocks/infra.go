// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go
//
// Generated by this command:
//
//	mockgen -source=manager.go -destination ./mocks/infra.go -package=mockinfra
//

// Package mockinfra is a generated GoMock package.
package mockinfra

import (
	context "context"
	reflect "reflect"

	infra "github.com/ainsleydev/webkit/internal/infra"
	env "github.com/ainsleydev/webkit/pkg/env"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockManager) Apply(ctx context.Context, arg1 env.Environment) (infra.ApplyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, arg1)
	ret0, _ := ret[0].(infra.ApplyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Apply indicates an expected call of Apply.
func (mr *MockManagerMockRecorder) Apply(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockManager)(nil).Apply), ctx, arg1)
}

// Cleanup mocks base method.
func (m *MockManager) Cleanup() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cleanup")
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockManagerMockRecorder) Cleanup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockManager)(nil).Cleanup))
}

// Destroy mocks base method.
func (m *MockManager) Destroy(ctx context.Context, arg1 env.Environment) (infra.DestroyOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy", ctx, arg1)
	ret0, _ := ret[0].(infra.DestroyOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Destroy indicates an expected call of Destroy.
func (mr *MockManagerMockRecorder) Destroy(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockManager)(nil).Destroy), ctx, arg1)
}

// Import mocks base method.
func (m *MockManager) Import(ctx context.Context, input infra.ImportInput) (infra.ImportOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Import", ctx, input)
	ret0, _ := ret[0].(infra.ImportOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Import indicates an expected call of Import.
func (mr *MockManagerMockRecorder) Import(ctx, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Import", reflect.TypeOf((*MockManager)(nil).Import), ctx, input)
}

// Init mocks base method.
func (m *MockManager) Init(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Init indicates an expected call of Init.
func (mr *MockManagerMockRecorder) Init(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockManager)(nil).Init), ctx)
}

// Output mocks base method.
func (m *MockManager) Output(ctx context.Context, arg1 env.Environment) (infra.OutputResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output", ctx, arg1)
	ret0, _ := ret[0].(infra.OutputResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Output indicates an expected call of Output.
func (mr *MockManagerMockRecorder) Output(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockManager)(nil).Output), ctx, arg1)
}

// Plan mocks base method.
func (m *MockManager) Plan(ctx context.Context, arg1 env.Environment) (infra.PlanOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plan", ctx, arg1)
	ret0, _ := ret[0].(infra.PlanOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Plan indicates an expected call of Plan.
func (mr *MockManagerMockRecorder) Plan(ctx, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plan", reflect.TypeOf((*MockManager)(nil).Plan), ctx, arg1)
}
